app: playmo-ranking-${env:PLAYMO_PROMO_ID}
service: playmo-ranking-${env:PLAYMO_PROMO_ID}
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-single-page-app-plugin
  - serverless-offline

custom:
  s3Bucket: ${self:service}
  baseUrl: ${env:PLAYMO_PROMO_URL}
  token: ${env:PLAYMO_PROMO_TOKEN}

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  profile: ${env:AWS_PROFILE}

functions:
  api:
    handler: index.api
    environment:
      BASE_URL: ${self:custom.baseUrl}
      TOKEN: ${self:custom.token}
    events:
      - httpApi:
          path: /
          method: get

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.s3Bucket}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      DeletionPolicy: Delete
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          HttpVersion: "http2"
          IPV6Enabled: "true"
          PriceClass: "PriceClass_100"
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    LambdaUrl:
      Value:
        'Fn::GetAtt': [ HttpApi, ApiEndpoint ]
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
